@model d20.InitTracker.Data.Models.Encounter

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit</h1>

<h4>Encounter</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EncounterKey" />
            <div class="form-group">
                <label asp-for="EncounterName" class="control-label"></label>
                <input asp-for="EncounterName" class="form-control" />
                <span asp-validation-for="EncounterName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EncounterStartDate" class="control-label"></label>
                <input asp-for="EncounterStartDate" class="form-control" />
                <span asp-validation-for="EncounterStartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-light" />
            </div>
        </form>
    </div>
    <div class="container">
        <h2>Edit Combatants</h2>
        <form>
            <!-- Other fields for Encounter -->

            <h3>Combatants</h3>
            <ul id="combatantList">
                @foreach (var ec in Model.EncounterCombatants.OrderBy(c => c.Initiative))
                {
                    <li>
                        @ec.CombatantKeyNavigation.Name (Initiative: @ec.Initiative)
                        <button type="button" class="btn btn-light" onclick="removeCombatant(@ec.CombatantKey)">Remove</button>
                    </li>
                }
            </ul>
            <div class="row">
                <div class="col-3">
                    <select id="combatantDropdown" class="form-select">
                        <option value="">Select Combatant</option>
                        @foreach (var combatant in ViewBag.AllCombatants)
                        {
                            <option value="@combatant.CombatantKey">@combatant.Name</option>
                        }
                    </select>
                </div>
                <div class="col-3">
                    <input type="number" id="initiativeInput" placeholder="Initiative" />
                </div>
                <div class="col-3">
                    <button type="button" class="btn btn-light" onclick="addCombatant()">Add Combatant</button>
                </div>
            </div>
        </form>
    </div>



</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function addCombatant() {
            const encounterKey = @Model.EncounterKey;
            const combatantKey = document.getElementById('combatantDropdown').value;
            const initiative = document.getElementById('initiativeInput').value;

            if (combatantKey && initiative) {


                alert("Attempting to Add Combatant!");

                fetch('/api/EncounterCombatants/Add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ EncounterKey: encounterKey, CombatantKey: combatantKey, Initiative: initiative })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Update the combatant list
                        refreshCombatantList();
                    })
                    .catch(error => console.error('Error:', error));
            }
        }

        function removeCombatant(combatantKey) {
            const encounterKey = @Model.EncounterKey;

            fetch('/api/EncounterCombatants/Remove', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ EncounterKey: encounterKey, CombatantKey: combatantKey })
            })
                .then(response => response.ok ? refreshCombatantList() : console.error('Error removing combatant'))
                .catch(error => console.error('Error:', error));
        }

        function refreshCombatantList() {
            const encounterKey = @Model.EncounterKey;

            fetch(`/api/Encounters/${encounterKey}/Combatants`)
                .then(response => response.json())
                .then(data => {
                    const list = document.getElementById('combatantList');
                    list.innerHTML = '';
                    data.forEach(combatant => {
                        const li = document.createElement('li');
                        li.textContent = `${combatant.Name} (Initiative: ${combatant.Initiative})`;
                        const button = document.createElement('button');
                        button.textContent = 'Remove';
                        button.setAttribute('type', 'button');
                        button.setAttribute('onclick', `removeCombatant(${combatant.CombatantKey})`);
                        li.appendChild(button);
                        list.appendChild(li);
                    });
                })
                .catch(error => console.error('Error:', error));
        }
    </script>


}
